generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Instructor {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  firstName           String
  lastName            String
  instructorClerkId   String?              @unique
  googleId            String
  createdAt           DateTime             @default(now())
  vehicleMaintenances VehicleMaintenance[]
  lessons             Lesson[]
  studentInstructors  StudentInstructor[]
  Income              Income[]

  @@index([instructorClerkId])
}

model StudentInstructor {
  id                Int         @id @default(autoincrement())
  studentId         Int
  instructorId      Int
  instructorClerkId String?
  student           Student     @relation("StudentToStudentInstructor", fields: [studentId], references: [id])
  instructor        Instructor? @relation(fields: [instructorClerkId], references: [instructorClerkId])

  @@index([studentId])
  @@index([instructorClerkId])
}

model Student {
  id                 Int                 @id @default(autoincrement())
  firstName          String
  lastName           String
  phoneNumber        String              @unique
  email              String?
  drivingClass       String
  bde                String
  streetAddress      String
  postalCode         String
  city               String
  province           String
  country            String
  remarks            String?
  createdAt          DateTime            @default(now())
  lessons            Lesson[]
  studentInstructors StudentInstructor[] @relation("StudentToStudentInstructor")

  @@index([id])
}

model Lesson {
  id                Int         @id @default(autoincrement())
  roadTest          String
  startTime         String
  endTime           String
  date              String
  duration          Int
  paymentType       String
  paymentAmount     Int
  remarks           String?
  instructorId      Int
  instructorClerkId String?
  studentId         Int
  instructor        Instructor? @relation(fields: [instructorClerkId], references: [instructorClerkId])
  student           Student     @relation(fields: [studentId], references: [id])

  @@index([instructorClerkId])
  @@index([studentId])
}

model VehicleMaintenance {
  id                Int         @id @default(autoincrement())
  date              String
  odometer          Int
  fueling           Int
  gas               Int
  maintenance       Int
  remarks           String?
  instructorId      Int
  instructorClerkId String?
  instructor        Instructor? @relation(fields: [instructorClerkId], references: [instructorClerkId])

  @@index([instructorClerkId])
}

model Income {
  id                Int         @id @default(autoincrement())
  date              String
  income            Int
  incomeMethod      String
  remarks           String?
  instructorClerkId String?
  instructor        Instructor? @relation(fields: [instructorClerkId], references: [instructorClerkId])

  @@index([instructorClerkId])
}
